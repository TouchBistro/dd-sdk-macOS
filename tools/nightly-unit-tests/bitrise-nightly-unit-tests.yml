---
format_version: 11
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
project_type: other

# This workflow executes SDK unit tests for different versions of iOS. It is run nightly and each run does random
# selection of iOS Simulators and iOS devices (either pre-installed on the CI host or downloaded at runtime).
#
# Both running tests and installing simulator are time-expensive operations (~10-15min each) and our Bitrise build
# timeout is very restrictive (90min), so this workflow tries to best utilise the allowed time to not receive timeout.
#
# The work is divided into two parts:
# * The first part, defined in this YML, builds a randomized Test Plan composed of two kinds of steps:
#     - {run tests} - if the simulator is already pre-installed,
#     - {install simulator + run tests} - if the simulator is not installed and needs to be downloaded.
#   This logic is implemented in Python (`generate_bitrise_yml.py`). It creates randomized Test Plan,
#   installs missing simulators and generates another YML file: `bitrise.yml`, to execute the plan.
# * The second part, defined in generated `bitrise.yml`, executes the Test Plan by running tests for given
#   device and OS version. All is followed by sending Slack notification on the build status. 
#
# The content of generated `bitrise.yml` file can be previewed in `bitrise.yml.src` template used by Python
# script. The generated version is also attached to build artifacts.
#
#
# Following ENV variables can be defined when launching Bitrise task (useful in debugging):
# +--------------------------+------------------+---------------+-------------------------------------------------------------------------+
# | DD_SIMULATOR_OS_NAME     | e.g. 'iOS'       | 'iOS'         | The OS name.                                                            |
# | DD_SIMULATOR_OS_VERSIONS | e.g. '14.2 14.3' | 'all'         | List of OS versions. Defaults to 'all' which selects versions randomly. |
# | DD_SKIP_SLACK            | null / 'yes'     | null          | To skip sending Slack notification.                                     |
# | DD_SKIP_RUNNING_TESTS    | null / 'yes'     | null          | To skip running tests (useful to debug `bitrise.yml` generation).       |
# | DD_DRY_RUN               | null / 'yes'     | null          | To skip executing generated `bitrise.yml` (useful to debug locally).    |
# +--------------------------+------------------+---------------+-------------------------------------------------------------------------+

workflows:
  run_nightly_unit_tests:
    description: |-
        Generates best 'bitrise.yml' for running unit tests on range of runtimes.
    steps:
    - script:
        title: Prepare host environment and generate `bitrise.yml`.
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -e
            gem install xcode-install

            # Record env logs before installing new simulators
            mkdir -p tools/nightly-unit-tests/env-logs
            xcrun simctl list --json > tools/nightly-unit-tests/env-logs/xcrun-simctl-list-before.json
            xcversion simulators > tools/nightly-unit-tests/env-logs/xcversion-simulators-before

            # Read OS name or default to 'iOS'
            DD_OS_NAME="${DD_SIMULATOR_OS_NAME:-iOS}"

            # Read OS versions or default to 'all'
            DD_OS_VERSIONS="${DD_SIMULATOR_OS_VERSIONS:-all}"

            if [[ -z "${DD_DRY_RUN}" ]]; then
              # DD_DRY_RUN is not set: perform regular run
              python3 tools/nightly-unit-tests/generate_bitrise_yml.py \
                  --simulator-os-name="$DD_OS_NAME" \
                  --simulator-os-versions="$DD_OS_VERSIONS"
            else
              # DD_DRY_RUN is set: perform dry run
              python3 tools/nightly-unit-tests/generate_bitrise_yml.py \
                  --simulator-os-name="$DD_OS_NAME" \
                  --simulator-os-versions="$DD_OS_VERSIONS" \
                  --dry-run
            fi

            # Record env logs after installing new simulators
            xcrun simctl list --json > tools/nightly-unit-tests/env-logs/xcrun-simctl-list-after.json
            xcversion simulators > tools/nightly-unit-tests/env-logs/xcversion-simulators-after
    - deploy-to-bitrise-io:
        inputs:
        - deploy_path: tools/nightly-unit-tests/bitrise.yml
    - deploy-to-bitrise-io:
        inputs:
        - deploy_path: tools/nightly-unit-tests/env-logs
    - bitrise-run:
        title: Switch to generated `bitrise.yml`
        run_if: '{{(getenv "DD_DRY_RUN") | eq ""}}'
        inputs:
        - bitrise_config_path: tools/nightly-unit-tests/bitrise.yml
        - workflow_id: 'run_all'
